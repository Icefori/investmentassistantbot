import io
import matplotlib.pyplot as plt
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from collections import defaultdict
from datetime import datetime, date, timedelta
from bot.db import connect_db
from bot.scheduler.currency import fetch_rates_by_date

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def get_portfolio_data(user_id):
    conn = await connect_db()
    portfolio_rows = await conn.fetch("SELECT * FROM portfolio WHERE user_id = $1", user_id)
    await conn.close()
    return portfolio_rows

async def get_transactions(user_id):
    conn = await connect_db()
    txs = await conn.fetch("SELECT * FROM transactions WHERE user_id = $1 ORDER BY date", user_id)
    await conn.close()
    return txs

# --- –ü–∞–π-—á–∞—Ä—Ç –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é ---

async def send_portfolio_pie_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    portfolio_rows = await get_portfolio_data(user_id)
    if not portfolio_rows:
        await update.callback_query.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–∫–µ—Ä–∞–º
    values = []
    labels = []
    for row in portfolio_rows:
        labels.append(row["ticker"])
        values.append(row["market_value_kzt"])

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(photo=InputFile(buf), caption="–ü–∞–π-—á–∞—Ä—Ç –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é")

# --- –ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

async def send_category_pie_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    portfolio_rows = await get_portfolio_data(user_id)
    if not portfolio_rows:
        await update.callback_query.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = sorted(set(row["category"] for row in portfolio_rows))
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    if len(context.args) == 0:
        keyboard = [
            [InlineKeyboardButton(cat, callback_data=f"pie_category|{cat}")]
            for cat in categories
        ]
        await update.callback_query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–∞–π-—á–∞—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
    category = context.args[0]
    filtered = [row for row in portfolio_rows if row["category"] == category]
    if not filtered:
        await update.callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    labels = [row["ticker"] for row in filtered]
    values = [row["market_value_kzt"] for row in filtered]

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(photo=InputFile(buf), caption=f"–ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

# --- –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–æ–±—â–∏–π) ---

async def send_portfolio_growth_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    txs = await get_transactions(user_id)
    if not txs:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã
    all_dates = sorted({datetime.strptime(tx["date"], "%d-%m-%Y").date() for tx in txs})
    if not all_dates:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ –≤—Å–µ –¥–∞—Ç—ã
    rates_by_date = {}
    for d in all_dates:
        rates, _ = await fetch_rates_by_date(datetime.combine(d, datetime.min.time()))
        rates_by_date[d] = dict(rates)
        rates_by_date[d]["KZT"] = 1.0
        rates_by_date[d]["USD"] = rates_by_date[d].get("USD", 1.0)

    # –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)
    portfolio_values = []
    prev_value = None
    for d in all_dates:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        txs_up_to_date = [tx for tx in txs if datetime.strptime(tx["date"], "%d-%m-%Y").date() <= d]
        # FIFO –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        from collections import defaultdict, deque
        transactions_by_ticker = defaultdict(list)
        for tx in txs_up_to_date:
            transactions_by_ticker[tx["ticker"]].append(dict(tx))
        invested = 0.0
        market_value = 0.0
        for ticker, ticker_txs in transactions_by_ticker.items():
            fifo = deque()
            total_qty = 0
            currency = ticker_txs[0]["currency"]
            for tx in ticker_txs:
                qty = tx["qty"]
                price = tx["price"]
                tx_date = datetime.strptime(tx["date"], "%d-%m-%Y").date()
                rate_on_date = rates_by_date[tx_date].get(currency, 1.0)
                if qty > 0:
                    fifo.append({"qty": qty, "price": price, "rate": rate_on_date, "currency": currency})
                    total_qty += qty
                elif qty < 0:
                    sell_qty = -qty
                    total_qty += qty
                    while sell_qty > 0 and fifo:
                        lot = fifo[0]
                        if lot["qty"] > sell_qty:
                            lot["qty"] -= sell_qty
                            sell_qty = 0
                        else:
                            sell_qty -= lot["qty"]
                            fifo.popleft()
            if total_qty <= 0 or not fifo:
                continue
            # –°—á–∏—Ç–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ FIFO-–æ—Å—Ç–∞—Ç–∫—É
            for lot in fifo:
                if lot["currency"] == "KZT":
                    invested += lot["price"] * lot["qty"]
                elif lot["currency"] == "USD":
                    invested += lot["price"] * lot["qty"] * lot["rate"]
                else:
                    invested += lot["price"] * lot["qty"] * lot["rate"]
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: —Å—á–∏—Ç–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å = –≤–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏)
            # –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
            market_value += invested  # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å

        # –ü—Ä–∏—Ä–æ—Å—Ç –≤ %
        if invested > 0:
            gain_percent = ((market_value - invested) / invested) * 100
        else:
            gain_percent = 0
        portfolio_values.append(gain_percent)
        prev_value = market_value

    # –ì—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(all_dates, portfolio_values, marker='o')
    ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏—Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%)")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("% –ø—Ä–∏—Ä–æ—Å—Ç–∞")
    ax.grid(True)
    fig.autofmt_xdate()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(photo=InputFile(buf), caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%)")

# --- Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ---

def get_portfolio_inline_keyboard(categories):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–∞–π-—á–∞—Ä—Ç (–≤–µ—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å)", callback_data="pie_all")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ (–≤–µ—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å)", callback_data="growth_all")],
        [InlineKeyboardButton("üìä –ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="pie_category")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="growth_category")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---

async def portfolio_chart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    context.args = []
    if data == "pie_all":
        await send_portfolio_pie_chart(update, context)
    elif data == "growth_all":
        await send_portfolio_growth_chart(update, context)
    elif data == "pie_category":
        await send_category_pie_chart(update, context)
    elif data.startswith("pie_category|"):
        category = data.split("|", 1)[1]
        context.args = [category]
        await send_category_pie_chart(update, context)
    # growth_category –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–∞–π-—á–∞—Ä—Ç—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# --- –î–ª—è app.py ---

portfolio_charts_handler = CallbackQueryHandler(portfolio_chart_callback, pattern="^(pie_all|growth_all|pie_category|pie_category\|.+)$")