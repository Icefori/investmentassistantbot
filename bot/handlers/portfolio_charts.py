import io
import matplotlib.pyplot as plt
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from datetime import datetime
from bot.handlers.portfolio import summarize_portfolio
from bot.db import connect_db
from bot.handlers.portfolio import calculate_portfolio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ

# --- Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ---
def get_portfolio_inline_keyboard(categories):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–∞–π-—á–∞—Ä—Ç (–≤–µ—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å)", callback_data="pie_all")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ (–≤–µ—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å)", callback_data="growth_all")],
        [InlineKeyboardButton("üìä –ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="pie_category")],
    ]
    if categories:
        for cat in categories:
            keyboard.append([InlineKeyboardButton(f"–ü–∞–π-—á–∞—Ä—Ç: {cat}", callback_data=f"pie_category|{cat}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="back_to_portfolio")])
    return InlineKeyboardMarkup(keyboard)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è ---
async def get_portfolio_calculated(user_id):
    portfolio, portfolio_rows, tickers_by_category = await calculate_portfolio(user_id)
    return portfolio, portfolio_rows, tickers_by_category

# --- –ü–∞–π-—á–∞—Ä—Ç –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é ---
async def send_portfolio_pie_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    portfolio, portfolio_rows, _ = await get_portfolio_calculated(user_id)
    if not portfolio_rows:
        await update.callback_query.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    values = []
    labels = []
    for ticker, t in portfolio["ticker_data"].items():
        labels.append(ticker)
        values.append(t["market_value_kzt"])

    if not values or sum(values) == 0:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é (‚Ç∏)")

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(
        photo=InputFile(buf),
        caption="–ü–∞–π-—á–∞—Ä—Ç –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é (‚Ç∏)",
        reply_markup=get_portfolio_inline_keyboard(sorted(portfolio["tickers_by_category"].keys()))
    )

# --- –ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
async def send_category_pie_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    portfolio, portfolio_rows, tickers_by_category = await get_portfolio_calculated(user_id)
    if not portfolio_rows:
        await update.callback_query.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    categories = sorted(tickers_by_category.keys())
    if not context.args:
        keyboard = [
            [InlineKeyboardButton(cat, callback_data=f"pie_category|{cat}")]
            for cat in categories
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="back_to_portfolio")])
        await update.callback_query.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∞–π-—á–∞—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    category = context.args[0]
    filtered = [portfolio["ticker_data"][ticker] for ticker in tickers_by_category[category]]
    if not filtered:
        await update.callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return

    labels = [ticker for ticker in tickers_by_category[category]]
    values = [t["market_value_kzt"] for t in filtered]

    if not values or sum(values) == 0:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (‚Ç∏)")

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(
        photo=InputFile(buf),
        caption=f"–ü–∞–π-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (‚Ç∏)",
        reply_markup=get_portfolio_inline_keyboard(categories)
    )

# --- –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–æ–±—â–∏–π) ---
async def send_portfolio_growth_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    portfolio, portfolio_rows, _ = await calculate_portfolio(user_id)
    if not portfolio_rows:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    conn = await connect_db()
    txs = await conn.fetch("SELECT * FROM transactions WHERE user_id = $1 ORDER BY date", user_id)
    await conn.close()
    if not txs:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    all_dates = sorted({datetime.strptime(tx["date"], "%d-%m-%Y").date() for tx in txs})
    if not all_dates:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º.", show_alert=True)
        return

    from bot.scheduler.currency import fetch_rates_by_date
    today_rates, _ = await fetch_rates_by_date(datetime.now())
    usd_rate = dict(today_rates).get("USD", 1.0)

    portfolio_values = []
    for d in all_dates:
        from collections import defaultdict, deque
        txs_up_to_date = [tx for tx in txs if datetime.strptime(tx["date"], "%d-%m-%Y").date() <= d]
        transactions_by_ticker = defaultdict(list)
        for tx in txs_up_to_date:
            transactions_by_ticker[tx["ticker"]].append(dict(tx))
        market_value_kzt = 0.0
        for ticker, ticker_txs in transactions_by_ticker.items():
            fifo = deque()
            total_qty = 0
            currency = ticker_txs[0]["currency"]
            for tx in ticker_txs:
                qty = tx["qty"]
                price = tx["price"]
                if qty > 0:
                    fifo.append({"qty": qty, "price": price, "currency": currency})
                    total_qty += qty
                elif qty < 0:
                    sell_qty = -qty
                    total_qty += qty
                    while sell_qty > 0 and fifo:
                        lot = fifo[0]
                        if lot["qty"] > sell_qty:
                            lot["qty"] -= sell_qty
                            sell_qty = 0
                        else:
                            sell_qty -= lot["qty"]
                            fifo.popleft()
            if total_qty <= 0 or not fifo:
                continue
            for lot in fifo:
                if lot["currency"] == "KZT":
                    market_value_kzt += lot["price"] * lot["qty"]
                elif lot["currency"] == "USD":
                    market_value_kzt += lot["price"] * lot["qty"] * usd_rate
                else:
                    market_value_kzt += lot["price"] * lot["qty"] * usd_rate  # fallback
        portfolio_values.append(market_value_kzt)

    if not portfolio_values or sum(portfolio_values) == 0:
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
        return

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(all_dates, portfolio_values, marker='o')
    ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (‚Ç∏)")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å, ‚Ç∏")
    ax.grid(True)
    fig.autofmt_xdate()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    await update.callback_query.message.reply_photo(
        photo=InputFile(buf),
        caption="–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (‚Ç∏)",
        reply_markup=get_portfolio_inline_keyboard(sorted(portfolio["tickers_by_category"].keys()))
    )

# --- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
async def portfolio_chart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    context.args = []
    if data == "pie_all":
        await send_portfolio_pie_chart(update, context)
    elif data == "growth_all":
        await send_portfolio_growth_chart(update, context)
    elif data == "pie_category":
        await send_category_pie_chart(update, context)
    elif data.startswith("pie_category|"):
        category = data.split("|", 1)[1]
        context.args = [category]
        await send_category_pie_chart(update, context)
    elif data == "back_to_portfolio":
        await summarize_portfolio(update, context)

# --- –î–ª—è app.py ---
portfolio_charts_handler = CallbackQueryHandler(
    portfolio_chart_callback,
    pattern="^(pie_all|growth_all|pie_category|pie_category\|.+|back_to_portfolio)$"
)