from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from bot.db import connect_db

ASK_NAME, ASK_TIMEZONE, ASK_CUSTOM_TIMEZONE = range(3)

TIMEZONES = [
    "–ê—Å—Ç–∞–Ω–∞", "–ú–æ—Å–∫–≤–∞", "–ê–º—Å—Ç–µ—Ä–¥–∞–º", "–î—Ä—É–≥–∞—è –∑–æ–Ω–∞"
]
TIMEZONE_MAP = {
    "–ê—Å—Ç–∞–Ω–∞": "+6",
    "–ú–æ—Å–∫–≤–∞": "+3",
    "–ê–º—Å—Ç–µ—Ä–¥–∞–º": "+1"
}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –∏–∑ menu.py –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
from bot.utils.menu import reply_markup

async def is_registered(user_id: int) -> bool:
    conn = await connect_db()
    user = await conn.fetchrow("SELECT 1 FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return user is not None

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = await connect_db()
    user = await conn.fetchrow("SELECT 1 FROM users WHERE user_id = $1", user_id)
    await conn.close()
    if user:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è) üòä",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name or len(name) > 30:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤), —á—Ç–æ–±—ã —è –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ª–∏—á–Ω–æ üòä"
        )
        return ASK_NAME
    context.user_data["name"] = name
    kb = [[tz] for tz in TIMEZONES]
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}! üôè\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–∞—è –∑–æ–Ω–∞', –µ—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_TIMEZONE

async def ask_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tz = update.message.text.strip()
    if tz not in TIMEZONES:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–∞—è –∑–æ–Ω–∞'."
        )
        return ASK_TIMEZONE
    if tz == "–î—Ä—É–≥–∞—è –∑–æ–Ω–∞":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ GMT, –Ω–∞–ø—Ä–∏–º–µ—Ä: +5 –∏–ª–∏ -11.\n"
            "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã —Å–æ –∑–Ω–∞–∫–æ–º –ø–ª—é—Å –∏–ª–∏ –º–∏–Ω—É—Å."
        )
        return ASK_CUSTOM_TIMEZONE
    context.user_data["timezone"] = TIMEZONE_MAP[tz]
    return await finish_registration(update, context)

async def ask_custom_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tz = update.message.text.strip()
    if not (tz.startswith("+") or tz.startswith("-")) or not tz[1:].isdigit():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: +5 –∏–ª–∏ -11."
        )
        return ASK_CUSTOM_TIMEZONE
    context.user_data["timezone"] = tz
    return await finish_registration(update, context)

async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    name = context.user_data.get("name")
    timezone = context.user_data.get("timezone")
    conn = await connect_db()
    await conn.execute(
        "INSERT INTO users (user_id, username, name, timezone) VALUES ($1, $2, $3, $4)",
        user_id, username, name, timezone
    )
    await conn.close()
    await update.message.reply_text(
        f"üéâ –°–ø–∞—Å–∏–±–æ, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
        f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: GMT{timezone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞! üöÄ",
        reply_markup=reply_markup
    )
    return ConversationHandler.END