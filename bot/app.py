import os
import nest_asyncio
import asyncio

from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler,
    CommandHandler, CallbackQueryHandler, ConversationHandler, filters
)

from bot.handlers.deal import handle_deal, choose_category
from bot.handlers.portfolio import summarize_portfolio
from bot.utils.formatter import send_markdown
from bot.db import connect_db
from bot.utils.export import export_to_excel
from bot.handlers.taxes import export_taxes_excel
from bot.handlers.user import (
    is_registered, start_registration, ask_name, ask_timezone, ask_custom_timezone, finish_registration
)
from bot.utils.menu import reply_markup
from bot.handlers.portfolio_charts import portfolio_charts_handler  # –¥–æ–±–∞–≤–ª–µ–Ω–æ

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
ASK_NAME, ASK_TIMEZONE, ASK_CUSTOM_TIMEZONE = range(3)

# ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
registration_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start_registration)],
    states={
        ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
        ASK_TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_timezone)],
        ASK_CUSTOM_TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_custom_timezone)],
    },
    fallbacks=[],
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if await is_registered(user_id):
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ ConversationHandler
        await start_registration(update, context)

async def show_all_deals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = await connect_db()
    rows = await conn.fetch(
        "SELECT * FROM transactions WHERE user_id = $1 ORDER BY date DESC", user_id
    )
    await conn.close()

    if not rows:
        await update.message.reply_text("üì≠ –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "\n\n".join([
        f"*{r['ticker']}* | {r['qty']} —à—Ç √ó {r['price']:.2f} {r['currency']}\nüìÖ {r['date']}"
        for r in rows
    ])
    await update.message.reply_text(text, parse_mode="Markdown")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text in ["üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        context.user_data.pop("input_mode", None)

        if text == "üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
            await summarize_portfolio(update, context)
        else:
            await update.message.reply_text("üîî –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    if text == "‚ûï –°–¥–µ–ª–∫–∞":
        context.user_data["input_mode"] = "deals"
        await send_markdown(update,
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥.\n"
            "–§–æ—Ä–º–∞—Ç: `–¢–∏–∫–µ—Ä –ö–æ–ª-–≤–æ –¶–µ–Ω–∞ [–í–∞–ª—é—Ç–∞] [–î–∞—Ç–∞]`\n"
            "–ü—Ä–∏–º–µ—Ä:  `AAPL 10 150 USD 11-06-2025`\n"
            "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞."
        )
        return
    elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç":
        await export_to_excel(update, context)
    elif text == "üßæ –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤":
        context.user_data["input_mode"] = "taxes"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
    if context.user_data.get("input_mode") == "taxes":
        year_str = text.strip()
        if not (year_str.isdigit() and len(year_str) == 4):
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024")
            return
        year = int(year_str)
        await update.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
        await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
        filename = await export_taxes_excel(year)
        with open(filename, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"–í–∞—à –Ω–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {year} –≥–æ–¥"
            )
        context.user_data.pop("input_mode", None)
        return

    if context.user_data.get("input_mode") == "deals":
        await handle_deal(update, context)

# ‚ñ∂Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ main.py)
async def run_bot():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    app.add_handler(registration_conv_handler)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("all_deals", show_all_deals))
    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –ø–∞–π-—á–∞—Ä—Ç–æ–≤!
    app.add_handler(portfolio_charts_handler)  # <-- –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤—ã—à–µ!
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(CallbackQueryHandler(choose_category))  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ polling...")
    await app.run_polling()
