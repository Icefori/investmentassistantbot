import os
import nest_asyncio
import asyncio

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler,
    CommandHandler, CallbackQueryHandler, filters
)

from handlers.deal import handle_deal, choose_category
from utils.portfolio import summarize_portfolio
from utils.formatter import send_markdown
from bot.db import connect_db
from bot.utils.export import export_to_excel
from bot.utils.taxes import export_taxes_excel


BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

menu_keyboard = [
    ["üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "‚ûï –°–¥–µ–ª–∫–∞"],
    ["üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"],
    ["üì§ –≠–∫—Å–ø–æ—Ä—Ç", "üßæ –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤"]
]
reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def show_all_deals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = await connect_db()
    rows = await conn.fetch("SELECT * FROM transactions ORDER BY date DESC")
    await conn.close()

    if not rows:
        await update.message.reply_text("üì≠ –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "\n\n".join([
        f"*{r['ticker']}* | {r['qty']} —à—Ç √ó {r['price']:.2f} {r['currency']}\nüìÖ {r['date']}"
        for r in rows
    ])
    await update.message.reply_text(text, parse_mode="Markdown")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text in ["üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        context.user_data.pop("input_mode", None)

        if text == "üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
            summary = await summarize_portfolio()
            await update.message.reply_text(summary, parse_mode="Markdown")
        else:
            await update.message.reply_text("üîî –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    if text == "‚ûï –°–¥–µ–ª–∫–∞":
        context.user_data["input_mode"] = "deals"
        await send_markdown(update,
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥.\n"
            "–§–æ—Ä–º–∞—Ç: `–¢–∏–∫–µ—Ä –ö–æ–ª-–≤–æ –¶–µ–Ω–∞ [–í–∞–ª—é—Ç–∞] [–î–∞—Ç–∞]`\n"
            "–ü—Ä–∏–º–µ—Ä:  `AAPL 10 150 USD 11-06-2025`\n"
            "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞."
        )
        return
    elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç":
        await export_to_excel(update, context)
    elif text == "üßæ –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤":
        context.user_data["input_mode"] = "taxes"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
    if context.user_data.get("input_mode") == "taxes":
        year_str = text.strip()
        if not (year_str.isdigit() and len(year_str) == 4):
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024")
            return
        year = int(year_str)
        await update.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
        await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
        filename = await export_taxes_excel(year)
        with open(filename, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"–í–∞—à –Ω–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {year} –≥–æ–¥"
            )
        context.user_data.pop("input_mode", None)
        return

    if context.user_data.get("input_mode") == "deals":
        await handle_deal(update, context)


# ‚ñ∂Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ main.py)
async def run_bot():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("all_deals", show_all_deals))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(CallbackQueryHandler(choose_category))  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ polling...")
    await app.run_polling()
