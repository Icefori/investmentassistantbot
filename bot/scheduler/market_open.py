import pytz
from datetime import datetime, timedelta

# –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –±–∏—Ä–∂ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã –∏ EST)
MARKETS = [
    {
        "name": "KASE",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üá∞üáø"
    },
    {
        "name": "KASE Global",
        "open": (11, 30),
        "close": (22, 0),
        "tz": "Asia/Almaty",
        "emoji": "üåç"
    },
    {
        "name": "AIX",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üè¶"
    },
    {
        "name": "NASDAQ",
        "open": (9, 30),
        "close": (16, 0),
        "tz": "America/New_York",
        "emoji": "üá∫üá∏"
    }
]

def get_market_messages(event: str, now_local: datetime, gmt_offset: str):
    """
    event: 'open' –∏–ª–∏ 'close_soon'
    now_local: –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (datetime)
    gmt_offset: —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '+6' –∏–ª–∏ '-3'
    """
    messages = []
    grouped = {}

    for market in MARKETS:
        market_tz = pytz.timezone(market["tz"])
        today = now_local.astimezone(market_tz).date()
        open_dt = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=market["open"][0], minutes=market["open"][1]))
        close_dt = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=market["close"][0], minutes=market["close"][1]))
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if event == "open":
            key_dt = now_local.replace(hour=market["open"][0], minute=market["open"][1], second=0, microsecond=0)
            if now_local.replace(second=0, microsecond=0) == key_dt:
                grouped.setdefault(key_dt, []).append(market)
        elif event == "close_soon":
            key_dt = now_local.replace(hour=market["close"][0] - 1, minute=market["close"][1], second=0, microsecond=0)
            if now_local.replace(second=0, microsecond=0) == key_dt:
                grouped.setdefault(key_dt, []).append(market)

    for group in grouped.values():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ –≤ –≥—Ä—É–ø–ø–µ
        schedule_lines = []
        for m in group:
            market_tz = pytz.timezone(m["tz"])
            today = now_local.astimezone(market_tz).date()
            open_dt_market = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=m["open"][0], minutes=m["open"][1]))
            close_dt_market = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=m["close"][0], minutes=m["close"][1]))
            open_dt_local = open_dt_market.astimezone(now_local.tzinfo)
            close_dt_local = close_dt_market.astimezone(now_local.tzinfo)
            open_str = open_dt_local.strftime("%H:%M")
            close_str = close_dt_local.strftime("%H:%M")
            schedule_lines.append(f"{m['emoji']} *{m['name']}* ‚Äî {open_str}‚Äì{close_str}")

        names = " / ".join(f"{m['emoji']} *{m['name']}*" for m in group)
        if event == "open":
            messages.append(
                f"{names} ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤!\n"
                f"üü¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂:\n" +
                "\n".join(schedule_lines) +
                f"\n(GMT{gmt_offset})\n"
                f"–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫! üöÄ"
            )
        elif event == "close_soon":
            # –î–ª—è close_soon –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_lines = []
            for m in group:
                market_tz = pytz.timezone(m["tz"])
                today = now_local.astimezone(market_tz).date()
                close_dt_market = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=m["close"][0], minutes=m["close"][1]))
                close_dt_local = close_dt_market.astimezone(now_local.tzinfo)
                close_str = close_dt_local.strftime("%H:%M")
                close_lines.append(f"{m['emoji']} *{m['name']}* ‚Äî {close_str}")
            messages.append(
                f"{names} ‚Äî –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!\n"
                f"üîî –ë–∏—Ä–∂–∏ –∑–∞–∫—Ä–æ—é—Ç—Å—è:\n" +
                "\n".join(close_lines) +
                f"\n(GMT{gmt_offset})\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞—è–≤–∫–∏! ‚è≥"
            )
    return messages

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:
# –í 11:30, 16:00, 21:00 –∏ —Ç.–¥. –ø–æ –ê–º—Å—Ç–µ—Ä–¥–∞–º—É –≤—ã–∑—ã–≤–∞–π—Ç–µ get_market_messages('open', now_ams) –∏–ª–∏ get_market_messages('close_soon', now_ams)
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ Telegram

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
# async def send_market_notifications(bot, chat_id):
#     now_ams = datetime.now(pytz.timezone("Europe/Amsterdam"))
#     for event in ["open", "close_soon"]:
#         messages = get_market_messages(event, now_ams)
#         for msg in messages:
#             await bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")