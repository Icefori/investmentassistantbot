import pytz
from datetime import datetime, timedelta

# –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –±–∏—Ä–∂ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã –∏ EST)
MARKETS = [
    {
        "name": "KASE",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üá∞üáø"
    },
    {
        "name": "KASE Global",
        "open": (11, 30),
        "close": (22, 0),
        "tz": "Asia/Almaty",
        "emoji": "üåç"
    },
    {
        "name": "AIX",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üè¶"
    },
    {
        "name": "NASDAQ",
        "open": (9, 30),
        "close": (16, 0),
        "tz": "America/New_York",
        "emoji": "üá∫üá∏"
    }
]

def get_market_messages(event: str, user_tz: pytz.BaseTzInfo, gmt_offset: str):
    """
    event: 'open' –∏–ª–∏ 'close_soon'
    user_tz: pytz-—Ç–∞–π–º–∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gmt_offset: —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '+2' –∏–ª–∏ '-3'
    """
    messages = []
    now_local = datetime.now(user_tz).replace(second=0, microsecond=0)
    lines = []
    for market in MARKETS:
        market_tz = pytz.timezone(market["tz"])
        today_market = datetime.now(market_tz).date()
        # –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –≤ TZ –±–∏—Ä–∂–∏
        open_dt_market = market_tz.localize(datetime.combine(today_market, datetime.min.time()) + timedelta(hours=market["open"][0], minutes=market["open"][1]))
        close_dt_market = market_tz.localize(datetime.combine(today_market, datetime.min.time()) + timedelta(hours=market["close"][0], minutes=market["close"][1]))
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        open_dt_local = open_dt_market.astimezone(user_tz)
        close_dt_local = close_dt_market.astimezone(user_tz)
        open_str = open_dt_local.strftime("%H:%M")
        close_str = close_dt_local.strftime("%H:%M")

        if event == "open":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –±–∏—Ä–∂–∏
            if now_local.hour == open_dt_local.hour and now_local.minute == open_dt_local.minute:
                lines.append(f"{market['emoji']} *{market['name']}* ‚Äî {open_str}‚Äì{close_str}")
        elif event == "close_soon":
            # –ó–∞ 1 —á–∞—Å –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_soon_dt_local = close_dt_local - timedelta(hours=1)
            if now_local.hour == close_soon_dt_local.hour and now_local.minute == close_soon_dt_local.minute:
                lines.append(f"{market['emoji']} *{market['name']}* ‚Äî {close_str}")

    if lines:
        if event == "open":
            msg = (
                f"{' / '.join([l.split(' ')[0] + ' ' + l.split(' ')[1] for l in lines])} ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤!\n"
                f"üü¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂:\n" +
                "\n".join(lines) +
                f"\n(GMT{gmt_offset})\n"
                f"–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫! üöÄ"
            )
            messages.append(msg)
        elif event == "close_soon":
            msg = (
                f"{' / '.join([l.split(' ')[0] + ' ' + l.split(' ')[1] for l in lines])} ‚Äî –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!\n"
                f"üîî –ë–∏—Ä–∂–∏ –∑–∞–∫—Ä–æ—é—Ç—Å—è:\n" +
                "\n".join(lines) +
                f"\n(GMT{gmt_offset})\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞—è–≤–∫–∏! ‚è≥"
            )
            messages.append(msg)
    return messages

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# user_tz = pytz.timezone("Europe/Amsterdam")
# gmt_offset = "+2"
# messages = get_market_messages('open', user_tz, gmt_offset)
# for msg in messages:
#     print(msg)