import pytz
from datetime import datetime, timedelta

# –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –±–∏—Ä–∂ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã –∏ EST)
MARKETS = [
    {
        "name": "KASE",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üá∞üáø"
    },
    {
        "name": "KASE Global",
        "open": (11, 30),
        "close": (22, 0),
        "tz": "Asia/Almaty",
        "emoji": "üåç"
    },
    {
        "name": "AIX",
        "open": (11, 30),
        "close": (17, 0),
        "tz": "Asia/Almaty",
        "emoji": "üè¶"
    },
    {
        "name": "NASDAQ",
        "open": (9, 30),
        "close": (16, 0),
        "tz": "America/New_York",
        "emoji": "üá∫üá∏"
    }
]

def get_market_messages(event: str, now_ams: datetime):
    """event: 'open' –∏–ª–∏ 'close_soon'"""
    messages = []
    ams_tz = pytz.timezone("Europe/Amsterdam")
    grouped = {}

    for market in MARKETS:
        market_tz = pytz.timezone(market["tz"])
        today = now_ams.astimezone(market_tz).date()
        open_dt = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=market["open"][0], minutes=market["open"][1]))
        close_dt = market_tz.localize(datetime.combine(today, datetime.min.time()) + timedelta(hours=market["close"][0], minutes=market["close"][1]))
        open_dt_ams = open_dt.astimezone(ams_tz)
        close_dt_ams = close_dt.astimezone(ams_tz)
        now = now_ams.replace(second=0, microsecond=0)

        if event == "open":
            key_dt = open_dt_ams.replace(second=0, microsecond=0)
            if now == key_dt:
                grouped.setdefault(key_dt, []).append(market)
        elif event == "close_soon":
            key_dt = (close_dt_ams - timedelta(hours=1)).replace(second=0, microsecond=0)
            if now == key_dt:
                grouped.setdefault(key_dt, []).append(market)

    for group in grouped.values():
        names = " / ".join(f"{m['emoji']} *{m['name']}*" for m in group)
        if event == "open":
            open_time = group[0]["open"]
            close_time = group[0]["close"]
            open_dt_ams = now_ams.replace(hour=open_time[0], minute=open_time[1], second=0, microsecond=0)
            close_dt_ams = now_ams.replace(hour=close_time[0], minute=close_time[1], second=0, microsecond=0)
            messages.append(
                f"{names} ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤!\n"
                f"üü¢ –ë–∏—Ä–∂–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å {open_dt_ams.strftime('%H:%M')} –¥–æ {close_dt_ams.strftime('%H:%M')} (–ø–æ –ê–º—Å—Ç–µ—Ä–¥–∞–º—É)\n"
                f"–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫! üöÄ"
            )
        elif event == "close_soon":
            close_time = group[0]["close"]
            close_dt_ams = now_ams.replace(hour=close_time[0], minute=close_time[1], second=0, microsecond=0)
            messages.append(
                f"{names} ‚Äî –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!\n"
                f"üîî –ë–∏—Ä–∂–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ {close_dt_ams.strftime('%H:%M')} (–ø–æ –ê–º—Å—Ç–µ—Ä–¥–∞–º—É)\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞—è–≤–∫–∏! ‚è≥"
            )
    return messages

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:
# –í 11:30, 16:00, 21:00 –∏ —Ç.–¥. –ø–æ –ê–º—Å—Ç–µ—Ä–¥–∞–º—É –≤—ã–∑—ã–≤–∞–π—Ç–µ get_market_messages('open', now_ams) –∏–ª–∏ get_market_messages('close_soon', now_ams)
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ Telegram

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
# async def send_market_notifications(bot, chat_id):
#     now_ams = datetime.now(pytz.timezone("Europe/Amsterdam"))
#     for event in ["open", "close_soon"]:
#         messages = get_market_messages(event, now_ams)
#         for msg in messages:
#             await bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")